# Import the needed imports
from azure.identity import AzureCliCredential
from azure.mgmt.compute import ComputeManagementClient
from azure.mgmt.network import NetworkManagementClient
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.network.models import Route, RouteTable, Subnet

# Acquire a credential object using CLI-based authentication.
credential = AzureCliCredential()

# Retrieve subscription ID and RG from user input
subscription_id = input("Enter the subscription ID: ")

# Step 1. Provision a virtual network
VNET_NAME = input("Enter the VNet-name: ")
SUBNET_NAME = input("Define the subnet-name: ")

LOCATION = "westeurope"
RESOURCE_GROUP_NAME = input("Enter the resource-group name: ")
ADDRESS_SPACE = input("Enter the address-space: ")

# Obtain the management object for networks
network_client = NetworkManagementClient(credential, subscription_id)

# Provision the virtual network and wait for completion
poller = network_client.virtual_networks.begin_create_or_update(
    RESOURCE_GROUP_NAME,
    VNET_NAME,
    {
        "location": LOCATION,
        "address_space": {"address_prefixes": [ADDRESS_SPACE]},
        "dhcp_options": {"dns_servers": ['10.102.0.100', '10.102.0.101']}
    },
)

vnet_result = poller.result()

print(
    f"Provisioned virtual network {vnet_result.name} with address \
prefixes {vnet_result.address_space.address_prefixes}"
)

# Step 2: Provision the subnet and wait for completion
poller = network_client.subnets.begin_create_or_update(
    RESOURCE_GROUP_NAME,
    VNET_NAME,
    SUBNET_NAME,
    {"address_prefix": ADDRESS_SPACE},
)
subnet_result = poller.result()

print(
    f"Provisioned virtual subnet {subnet_result.name} with address \
prefix {subnet_result.address_prefix}"
)


# Step 3: Create the routing table
ROUTE_TABLE_NAME = f"{SUBNET_NAME}_RT_001"
route_table_params = RouteTable(
    location=LOCATION,
    disable_bgp_route_propagation=True
    routes=[
        Route(
            name="Internet",
            address_prefix="0.0.0.0/0",
            next_hop_type="VirtualAppliance",
            next_hop_ip_address="10.10.10.10"
        ),
        Route(
            name="Local-Vnet",
            address_prefix="10.10.10.0/28",
            next_hop_type="VnetLocal"
        )
    ]
)

route_table_result = network_client.route_tables.begin_create_or_update(
    RESOURCE_GROUP_NAME,
    ROUTE_TABLE_NAME,
    route_table_params
)

rtresult = route_table_result.result()

subnet_params = Subnet(
    address_prefix=ADDRESS_SPACE,
    route_table=rtresult.id
)

poller = network_client.subnets.begin_create_or_update(
    RESOURCE_GROUP_NAME,
    VNET_NAME,
    SUBNET_NAME,
    subnet_params
)

subnet_result = poller.result()

